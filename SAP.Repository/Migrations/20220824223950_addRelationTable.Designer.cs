// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAP.Repository.SAPRepository;

#nullable disable

namespace SAP.Repository.Migrations
{
    [DbContext(typeof(SAPContext))]
    [Migration("20220824223950_addRelationTable")]
    partial class addRelationTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.AssignedRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedTutorId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchOfficeId")
                        .HasColumnType("integer");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModalityId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("TurnId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTutorId");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("ModalityId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TurnId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("AssignedRooms");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.AssignedTutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KidId")
                        .HasColumnType("integer");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("AssignedTutors");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.BranchOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModification");

                    b.ToTable("Collaborators");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Kid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KidBackgroudId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceBorn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("KidBackgroudId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Kids");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.KidBackground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgePregnancyMother")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlanified")
                        .HasColumnType("boolean");

                    b.Property<string>("Medicaments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotherDrink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicalsConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PrenatalCheckup")
                        .HasColumnType("boolean");

                    b.Property<string>("PsychologicalConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ThreatenedAbortion")
                        .HasColumnType("boolean");

                    b.Property<bool>("UrineTest")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.Property<string>("XRaysThirdMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("KidBackgrounds");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Modality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Modalities");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceBorn")
                        .HasColumnType("text");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("text");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("AssignedRoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedRoomId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserCreation")
                        .HasColumnType("integer");

                    b.Property<int>("UserModification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserCreation");

                    b.HasIndex("UserModification");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableDays")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("BranchOfficeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("BranchOfficeId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.AssignedRoom", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.AssignedTutor", "AssignedTutor")
                        .WithMany()
                        .HasForeignKey("AssignedTutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Collaborator", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Modality", "Modality")
                        .WithMany()
                        .HasForeignKey("ModalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTutor");

                    b.Navigation("BranchOffice");

                    b.Navigation("Collaborator");

                    b.Navigation("Modality");

                    b.Navigation("Room");

                    b.Navigation("Turn");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.AssignedTutor", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.Kid", "Kid")
                        .WithMany()
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kid");

                    b.Navigation("Parent");

                    b.Navigation("Relationship");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.BranchOffice", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.City", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Collaborator", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("User");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.DocumentType", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Kid", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.KidBackground", "KidBackground")
                        .WithMany()
                        .HasForeignKey("KidBackgroudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("KidBackground");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.KidBackground", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Modality", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Parent", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Payment", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.AssignedRoom", "AssignedRoom")
                        .WithMany()
                        .HasForeignKey("AssignedRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedRoom");

                    b.Navigation("PaymentType");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.PaymentType", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Relationship", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Room", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.Turn", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", "UserModificated")
                        .WithMany()
                        .HasForeignKey("UserModification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");

                    b.Navigation("UserModificated");
                });

            modelBuilder.Entity("SAP.Repository.SAPRepository.Entities.UserRole", b =>
                {
                    b.HasOne("SAP.Repository.SAPRepository.Entities.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAP.Repository.SAPRepository.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchOffice");
                });
#pragma warning restore 612, 618
        }
    }
}
